// Pin definitions
#define ENABLE_PIN 8               // Enable pin for all stepper drivers
#define LIGHT_SENSOR_PIN 2         // Light sensor to detect jar readiness
#define GRIPPER_PIN 7              // Gripper control pin
#define LINEAR_MOTOR_DIR_PIN 24    // Direction pin for linear stepper motor
#define LINEAR_MOTOR_STEP_PIN 25   // Step pin for linear stepper motor
#define ROTATION_MOTOR_DIR_PIN 26  // Direction pin for rotation stepper motor
#define ROTATION_MOTOR_STEP_PIN 27 // Step pin for rotation stepper motor
#define INTREX_TRIGGER_PIN 3       // Trigger for the INTREX labeling machine

// Variables for timing and control
int calibrationFactorHeight = 1;   // Calibration for vertical movement
int calibrationFactorRotation = 1; // Calibration for rotation speed

void setup() {
  // Pin setups
  pinMode(ENABLE_PIN, OUTPUT);
  digitalWrite(ENABLE_PIN, HIGH);  // Disable all drivers initially
  
  pinMode(LIGHT_SENSOR_PIN, INPUT);
  pinMode(GRIPPER_PIN, OUTPUT);
  pinMode(LINEAR_MOTOR_DIR_PIN, OUTPUT);
  pinMode(LINEAR_MOTOR_STEP_PIN, OUTPUT);
  pinMode(ROTATION_MOTOR_DIR_PIN, OUTPUT);
  pinMode(ROTATION_MOTOR_STEP_PIN, OUTPUT);
  pinMode(INTREX_TRIGGER_PIN, OUTPUT);
  
  Serial.begin(9600); // Initialize serial communication if needed
}

// Functions to enable/disable all drivers
void enableDrivers() {
  digitalWrite(ENABLE_PIN, LOW); // Enable all drivers
}

void disableDrivers() {
  digitalWrite(ENABLE_PIN, HIGH); // Disable all drivers
}

void loop() {
  // Check if a jar is ready using the light sensor
  if (digitalRead(LIGHT_SENSOR_PIN) == HIGH) {
    enableDrivers(); // Enable drivers to start the process
    
    // Step 1: Lower the gripper to the jar level
    digitalWrite(LINEAR_MOTOR_DIR_PIN, LOW);
    for (int i = 0; i < 200 * calibrationFactorHeight; i++) {
      digitalWrite(LINEAR_MOTOR_STEP_PIN, HIGH);
      delayMicroseconds(500); // Control speed of lowering
      digitalWrite(LINEAR_MOTOR_STEP_PIN, LOW);
      delayMicroseconds(500);
    }
    
    // Step 2: Grip the jar
    digitalWrite(GRIPPER_PIN, HIGH); // Activate gripper to hold jar
    delay(500);                      // Wait for the gripper to secure the jar
    
    // Step 3: Lift the jar to the labeling position
    digitalWrite(LINEAR_MOTOR_DIR_PIN, HIGH); // Set direction to lift
    for (int i = 0; i < 200 * calibrationFactorHeight; i++) {
      digitalWrite(LINEAR_MOTOR_STEP_PIN, HIGH);
      delayMicroseconds(500);
      digitalWrite(LINEAR_MOTOR_STEP_PIN, LOW);
      delayMicroseconds(500);
    }

    // Step 4: Trigger the INTREX labeling machine
    digitalWrite(INTREX_TRIGGER_PIN, HIGH); // Trigger label application
    delay(100);                             // Short delay for trigger
    digitalWrite(INTREX_TRIGGER_PIN, LOW);

    // Step 5: Rotate jar in sync with label application
    digitalWrite(ROTATION_MOTOR_DIR_PIN, HIGH); // Set rotation direction
    for (int i = 0; i < 400 * calibrationFactorRotation; i++) {
      digitalWrite(ROTATION_MOTOR_STEP_PIN, HIGH);
      delayMicroseconds(300); // Adjust to sync rotation speed with labeling
      digitalWrite(ROTATION_MOTOR_STEP_PIN, LOW);
      delayMicroseconds(300);
    }

    // Step 6: Lower the jar back to its initial position
    digitalWrite(LINEAR_MOTOR_DIR_PIN, LOW); // Direction for lowering
    for (int i = 0; i < 200 * calibrationFactorHeight; i++) {
      digitalWrite(LINEAR_MOTOR_STEP_PIN, HIGH);
      delayMicroseconds(500);
      digitalWrite(LINEAR_MOTOR_STEP_PIN, LOW);
      delayMicroseconds(500);
    }
    
    // Step 7: Release the gripper and disable drivers
    digitalWrite(GRIPPER_PIN, LOW); // Release jar
    disableDrivers();               // Disable all drivers to save power
  }
}
